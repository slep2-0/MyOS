.TH "C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/memory/paging/paging.h" 3 "MatanelOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/memory/paging/paging.h
.SH SYNOPSIS
.br
.PP
\fR#include <stddef\&.h>\fP
.br
\fR#include <stdbool\&.h>\fP
.br
\fR#include <stdint\&.h>\fP
.br
\fR#include '\&.\&./\&.\&./cpu/cpu\&.h'\fP
.br
\fR#include '\&.\&./\&.\&./drivers/gop/gop\&.h'\fP
.br
\fR#include '\&.\&./\&.\&./trace\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBKERNEL_VA_START\fP   0xfffff80000000000ULL"
.br
.ti -1c
.RI "#define \fBKERNEL_PHYS_BASE\fP   0x100000"
.br
.ti -1c
.RI "#define \fBMEM_TO_MAP\fP   0x100000000ULL"
.br
.ti -1c
.RI "#define \fBUNMAPPED_LOW_MEM_SIZE\fP   0x10000"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fB_FLAGS\fP \fBFLAGS\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fB_FLAGS\fP { \fBPAGE_PRESENT\fP = 1 << 0, \fBPAGE_RW\fP = 1 << 1, \fBPAGE_USER\fP = 1 << 2, \fBPAGE_PWT\fP = 0x8, \fBPAGE_PCD\fP = 0x10, \fBPAGE_ACCESSED\fP = 0x20, \fBPAGE_DIRTY\fP = 0x40, \fBPAGE_PS\fP = 0x80, \fBPAGE_GLOBAL\fP = 0x100 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBset_page_writable\fP (void *virtualaddress, bool writable)"
.br
.ti -1c
.RI "void \fBset_page_user_access\fP (void *virtualaddress, bool user_accessible)"
.br
.ti -1c
.RI "void \fBmap_page\fP (void *virtualaddress, uintptr_t physicaladdress, uint64_t flags)"
.br
.ti -1c
.RI "bool \fBunmap_page\fP (void *virtualaddress)"
.br
.ti -1c
.RI "bool \fBMtIsAddressValid\fP (void *virtualAddr)"
.br
.RI "This function checks if the virtual address given to it, is valid and present in the page tables of the kernel\&. "
.ti -1c
.RI "uintptr_t \fBMtTranslateVirtualToPhysical\fP (void *virtualaddress)"
.br
.RI "This function translates the virtual address to its corresponding physical address in the page tables if present\&. "
.ti -1c
.RI "void \fBMtAddPageFlags\fP (void *virtualaddress, uint64_t flags)"
.br
.RI "This function adds (doesn't set) flags to the specified virtual address (if exists)\&. This DOES NOT set flags! (Which means flags that are ON will stay ON and will not get rewritten) "
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define KERNEL_PHYS_BASE   0x100000"

.PP
Definition at line \fB19\fP of file \fBpaging\&.h\fP\&.
.SS "#define KERNEL_VA_START   0xfffff80000000000ULL"

.PP
Definition at line \fB18\fP of file \fBpaging\&.h\fP\&.
.SS "#define MEM_TO_MAP   0x100000000ULL"

.PP
Definition at line \fB20\fP of file \fBpaging\&.h\fP\&.
.SS "#define UNMAPPED_LOW_MEM_SIZE   0x10000"

.PP
Definition at line \fB21\fP of file \fBpaging\&.h\fP\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fB_FLAGS\fP \fBFLAGS\fP"

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fB_FLAGS\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\f(BIPAGE_PRESENT \fP
.TP
\f(BIPAGE_RW \fP
.TP
\f(BIPAGE_USER \fP
.TP
\f(BIPAGE_PWT \fP
.TP
\f(BIPAGE_PCD \fP
.TP
\f(BIPAGE_ACCESSED \fP
.TP
\f(BIPAGE_DIRTY \fP
.TP
\f(BIPAGE_PS \fP
.TP
\f(BIPAGE_GLOBAL \fP
.PP
Definition at line \fB26\fP of file \fBpaging\&.h\fP\&.
.SH "Function Documentation"
.PP 
.SS "void map_page (void * virtualaddress, uintptr_t physicaladdress, uint64_t flags)"

.PP
Definition at line \fB97\fP of file \fBpaging\&.c\fP\&.
.SS "void MtAddPageFlags (void * virtualaddress, uint64_t flags)"

.PP
This function adds (doesn't set) flags to the specified virtual address (if exists)\&. This DOES NOT set flags! (Which means flags that are ON will stay ON and will not get rewritten) 
.PP
\fBParameters\fP
.RS 4
\fIvirtualaddress\fP VA
.br
\fIflags\fP PAGE_FLAGS flags\&.
.RE
.PP

.PP
Definition at line \fB251\fP of file \fBpaging\&.c\fP\&.
.SS "bool MtIsAddressValid (void * virtualAddr)"

.PP
This function checks if the virtual address given to it, is valid and present in the page tables of the kernel\&. 
.PP
\fBParameters\fP
.RS 4
\fIvirtualAddr\fP 
.RE
.PP
\fBReturns\fP
.RS 4
True or False based if present or not\&.
.RE
.PP

.PP
Definition at line \fB285\fP of file \fBpaging\&.c\fP\&.
.SS "uintptr_t MtTranslateVirtualToPhysical (void * virtualaddress)"

.PP
This function translates the virtual address to its corresponding physical address in the page tables if present\&. 
.PP
\fBParameters\fP
.RS 4
\fIvirtualaddress\fP 
.RE
.PP
\fBReturns\fP
.RS 4
Physical Address or 0 if not found\&.
.RE
.PP

.PP
Definition at line \fB314\fP of file \fBpaging\&.c\fP\&.
.SS "void set_page_user_access (void * virtualaddress, bool user_accessible)"

.PP
Definition at line \fB212\fP of file \fBpaging\&.c\fP\&.
.SS "void set_page_writable (void * virtualaddress, bool writable)"

.PP
Definition at line \fB172\fP of file \fBpaging\&.c\fP\&.
.SS "bool unmap_page (void * virtualaddress)"

.PP
Definition at line \fB138\fP of file \fBpaging\&.c\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for MatanelOS from the source code\&.
