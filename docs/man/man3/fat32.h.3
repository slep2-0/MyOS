.TH "C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/filesystem/fat32/fat32.h" 3 "MatanelOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/filesystem/fat32/fat32.h
.SH SYNOPSIS
.br
.PP
\fR#include <stddef\&.h>\fP
.br
\fR#include <stdbool\&.h>\fP
.br
\fR#include <stdint\&.h>\fP
.br
\fR#include '\&.\&./\&.\&./trace\&.h'\fP
.br
\fR#include '\&.\&./\&.\&./drivers/gop/gop\&.h'\fP
.br
\fR#include '\&.\&./\&.\&./mtstatus\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fB_FAT32_FSINFO\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBEND_OF_DIRECTORY\fP   0x00"
.br
.ti -1c
.RI "#define \fBDELETED_DIR_ENTRY\fP   0xE5"
.br
.ti -1c
.RI "#define \fBFAT32_FAT_MASK\fP   0x0FFFFFFFU"
.br
.ti -1c
.RI "#define \fBFAT32_FREE_CLUSTER\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBFAT32_BAD_CLUSTER\fP   0x0FFFFFF7U"
.br
.ti -1c
.RI "#define \fBFAT32_EOC_MIN\fP   0x0FFFFFF8U /* inclusive */"
.br
.ti -1c
.RI "#define \fBFAT32_EOC_MAX\fP   0x0FFFFFFFU /* inclusive */"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fB_FAT32_FSINFO\fP \fBFAT32_FSINFO\fP"
.br
.ti -1c
.RI "typedef enum \fB_FAT32_ATTRIBUTES\fP \fBFAT32_ATTRIBUTES\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fB_FAT32_ATTRIBUTES\fP { \fBATTR_READ_ONLY\fP = 0x01, \fBATTR_HIDDEN\fP = 0x02, \fBATTR_SYSTEM\fP = 0x04, \fBATTR_VOLUME_ID\fP = 0x08, \fBATTR_DIRECTORY\fP = 0x10, \fBATTR_ARCHIVE\fP = 0x20, \fBATTR_LONG_NAME\fP = 0x0F }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "struct \fB__attribute__\fP ((packed)) _FAT32_BPB"
.br
.ti -1c
.RI "\fBMTSTATUS\fP \fBfat32_init\fP (int disk_index)"
.br
.ti -1c
.RI "void \fBfat32_list_root\fP (void)"
.br
.ti -1c
.RI "\fBMTSTATUS\fP \fBfat32_read_file\fP (const char *filename, uint32_t *file_size_out, void **buffer_out)"
.br
.RI "A FAT32 Function that reads the file requested into a dynamically allocated buffer\&. "
.ti -1c
.RI "\fBMTSTATUS\fP \fBfat32_create_directory\fP (const char *path)"
.br
.RI "Creates a new directory\&. "
.ti -1c
.RI "\fBMTSTATUS\fP \fBfat32_write_file\fP (const char *path, const void *data, uint32_t size, uint32_t file_modification_mode)"
.br
.RI "Creates a new file and writes data to it\&. "
.ti -1c
.RI "\fBMTSTATUS\fP \fBfat32_list_directory\fP (const char *path, char *listings, size_t max_len)"
.br
.RI "Lists the directory given\&. "
.ti -1c
.RI "\fBMTSTATUS\fP \fBfat32_delete_directory\fP (const char *path)"
.br
.RI "This function deletes the directory given to the function from the system\&. "
.ti -1c
.RI "\fBMTSTATUS\fP \fBfat32_delete_file\fP (const char *path)"
.br
.RI "This function deletes the file given to the function from the system\&. "
.ti -1c
.RI "bool \fBfat32_directory_is_empty\fP (const char *path)"
.br
.RI "This function returns if the directory given to the function is empty (e\&.g, has only '\&.' and '\&.\&.' entries) "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBFAT32_BPB\fP"
.br
.ti -1c
.RI "\fBFAT32_DIR_ENTRY\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define DELETED_DIR_ENTRY   0xE5"

.PP
Definition at line \fB18\fP of file \fBfat32\&.h\fP\&.
.SS "#define END_OF_DIRECTORY   0x00"

.PP
Definition at line \fB17\fP of file \fBfat32\&.h\fP\&.
.SS "#define FAT32_BAD_CLUSTER   0x0FFFFFF7U"

.PP
Definition at line \fB23\fP of file \fBfat32\&.h\fP\&.
.SS "#define FAT32_EOC_MAX   0x0FFFFFFFU /* inclusive */"

.PP
Definition at line \fB25\fP of file \fBfat32\&.h\fP\&.
.SS "#define FAT32_EOC_MIN   0x0FFFFFF8U /* inclusive */"

.PP
Definition at line \fB24\fP of file \fBfat32\&.h\fP\&.
.SS "#define FAT32_FAT_MASK   0x0FFFFFFFU"

.PP
Definition at line \fB21\fP of file \fBfat32\&.h\fP\&.
.SS "#define FAT32_FREE_CLUSTER   0x00000000U"

.PP
Definition at line \fB22\fP of file \fBfat32\&.h\fP\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fB_FAT32_ATTRIBUTES\fP \fBFAT32_ATTRIBUTES\fP"

.SS "typedef struct \fB_FAT32_FSINFO\fP \fBFAT32_FSINFO\fP"

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fB_FAT32_ATTRIBUTES\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\f(BIATTR_READ_ONLY \fP
.TP
\f(BIATTR_HIDDEN \fP
.TP
\f(BIATTR_SYSTEM \fP
.TP
\f(BIATTR_VOLUME_ID \fP
.TP
\f(BIATTR_DIRECTORY \fP
.TP
\f(BIATTR_ARCHIVE \fP
.TP
\f(BIATTR_LONG_NAME \fP
.PP
Definition at line \fB99\fP of file \fBfat32\&.h\fP\&.
.SH "Function Documentation"
.PP 
.SS "struct __attribute__ ((packed) )"

.PP
Definition at line \fB1\fP of file \fBfat32\&.h\fP\&.
.SS "\fBMTSTATUS\fP fat32_create_directory (const char * path)"

.PP
Creates a new directory\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP The full path to the new directory
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status code\&.
.RE
.PP

.PP
Definition at line \fB836\fP of file \fBfat32\&.c\fP\&.
.SS "\fBMTSTATUS\fP fat32_delete_directory (const char * path)"

.PP
This function deletes the directory given to the function from the system\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Full path to delete directory\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status code\&.
.RE
.PP

.PP
Definition at line \fB1761\fP of file \fBfat32\&.c\fP\&.
.SS "\fBMTSTATUS\fP fat32_delete_file (const char * path)"

.PP
This function deletes the file given to the function from the system\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Full path to delete file\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status code\&.
.RE
.PP

.PP
Definition at line \fB1794\fP of file \fBfat32\&.c\fP\&.
.SS "bool fat32_directory_is_empty (const char * path)"

.PP
This function returns if the directory given to the function is empty (e\&.g, has only '\&.' and '\&.\&.' entries) 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Full path to dir
.RE
.PP
\fBReturns\fP
.RS 4
True or false based if empty or not\&.
.RE
.PP

.PP
Definition at line \fB1499\fP of file \fBfat32\&.c\fP\&.
.SS "\fBMTSTATUS\fP fat32_init (int disk_index)"

.PP
Definition at line \fB531\fP of file \fBfat32\&.c\fP\&.
.SS "\fBMTSTATUS\fP fat32_list_directory (const char * path, char * listings, size_t max_len)"

.PP
Lists the directory given\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Path to directory, e\&.g "mydir/" 
.br
\fIlistings\fP [OUT] Pointer to directory listing\&. (each seperated with a newline character)
.br
\fImax_len\fP [IN] Max size of listings buffer\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status code\&.
.RE
.PP

.PP
Definition at line \fB1414\fP of file \fBfat32\&.c\fP\&.
.SS "void fat32_list_root (void )"

.PP
Definition at line \fB557\fP of file \fBfat32\&.c\fP\&.
.SS "\fBMTSTATUS\fP fat32_read_file (const char * filename, uint32_t * file_size_out, void ** buffer_out)"

.PP
A FAT32 Function that reads the file requested into a dynamically allocated buffer\&. 
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP The Filename to read, e\&.g "file\&.txt" or "tmp/folder/myfile\&.txt"
.br
\fIfile_size_out\fP A pointer to put the file size in bytes
.br
\fIbufferOut\fP A pointer to put the file buffer in (doesn't need to be dynamically allocated)
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status Code\&.
.RE
.PP

.PP
Definition at line \fB709\fP of file \fBfat32\&.c\fP\&.
.SS "\fBMTSTATUS\fP fat32_write_file (const char * path, const void * data, uint32_t size, uint32_t file_modification_mode)"

.PP
Creates a new file and writes data to it\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP The full path of the file to create
.br
\fIdata\fP A pointer to the data to write\&.
.br
\fIsize\fP The number of bytes to write
.br
\fIfile_modification_mode\fP Whether to APPEND or REPLACE the file\&. (in \fBFS_WRITE_MODES\fP enum)
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status code\&.
.RE
.PP

.PP
Definition at line \fB1001\fP of file \fBfat32\&.c\fP\&.
.SH "Variable Documentation"
.PP 
.SS "FAT32_BPB"

.PP
Definition at line \fB55\fP of file \fBfat32\&.h\fP\&.
.SS "FAT32_DIR_ENTRY"

.PP
Definition at line \fB78\fP of file \fBfat32\&.h\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for MatanelOS from the source code\&.
