.TH "C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/cpu/dpc/dpc.h" 3 "MatanelOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/cpu/dpc/dpc.h
.SH SYNOPSIS
.br
.PP
\fR#include <stdbool\&.h>\fP
.br
\fR#include <stdint\&.h>\fP
.br
\fR#include <stddef\&.h>\fP
.br
\fR#include '\&.\&./cpu\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBinit_dpc_system\fP (void)"
.br
.ti -1c
.RI "void \fBMtQueueDPC\fP (volatile \fBDPC\fP *dpc)"
.br
.ti -1c
.RI "void \fBRetireDPCs\fP (void)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void init_dpc_system (void )"
Deferred procedure calls (Like in Windows - https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/introduction-to-dpcs) Basically, they are function calls that happen in the interrupt service routine, in order to lower \fBIRQL\fP instead of staying in such a high \fBIRQL\fP\&. And to manage things that happen inside of the service routine effictively\&. 
.PP
Definition at line \fB16\fP of file \fBdpc\&.c\fP\&.
.SS "void MtQueueDPC (volatile \fBDPC\fP * dpc)"
Enqueue \fBDPC\fP for deferred exceution Safe to at ANY \fBIRQL\fP\&. 
.PP
Definition at line \fB21\fP of file \fBdpc\&.c\fP\&.
.SS "void RetireDPCs (void )"
Walk through the \fBDPC\fP queue, raising the \fBIRQL\fP to DISPATCH_LEVEL in the process\&. This gets called in a kernel idle (main) function thread\&. 
.PP
Definition at line \fB54\fP of file \fBdpc\&.c\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for MatanelOS from the source code\&.
