.TH "C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/filesystem/vfs/vfs.h" 3 "MatanelOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/filesystem/vfs/vfs.h
.SH SYNOPSIS
.br
.PP
\fR#include '\&.\&./fat32/fat32\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBFS_DRIVER\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fB_FS_WRITE_MODES\fP \fBFS_WRITE_MODES\fP"
.br
.ti -1c
.RI "typedef struct FS_DRIVER \fBFS_DRIVER\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fB_FS_WRITE_MODES\fP { \fBWRITE_MODE_APPEND_EXISTING\fP, \fBWRITE_MODE_CREATE_OR_REPLACE\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBMTSTATUS\fP \fBvfs_init\fP (void)"
.br
.RI "Initialize the Virtual File System (initializes other filesystem needed services as well) "
.ti -1c
.RI "\fBMTSTATUS\fP \fBvfs_read\fP (const char *filename, uint32_t *file_size_out, void **buffer_out)"
.br
.RI "Reads the file into a buffer\&. "
.ti -1c
.RI "\fBMTSTATUS\fP \fBvfs_write\fP (const char *path, const void *data, uint32_t size, \fBFS_WRITE_MODES\fP write_mode)"
.br
.RI "Creates a new file (or opens existing) and writes data to it\&. "
.ti -1c
.RI "\fBMTSTATUS\fP \fBvfs_delete\fP (const char *path)"
.br
.RI "This function deletes the file given to the function from the system\&. "
.ti -1c
.RI "\fBMTSTATUS\fP \fBvfs_listdir\fP (const char *path, char *listings, size_t max_len)"
.br
.RI "Lists the directory given\&. "
.ti -1c
.RI "\fBMTSTATUS\fP \fBvfs_mkdir\fP (const char *path)"
.br
.RI "Creates a new directory\&. "
.ti -1c
.RI "\fBMTSTATUS\fP \fBvfs_rmdir\fP (const char *path)"
.br
.RI "This function deletes the directory given to the function from the system\&. "
.ti -1c
.RI "bool \fBvfs_is_dir_empty\fP (const char *path)"
.br
.RI "This function returns if the directory given to the function is empty (e\&.g, has only '\&.' and '\&.\&.' entries) "
.ti -1c
.RI "void \fBvfs_listrootdir\fP (void)"
.br
.RI "This function will list the root directory of the main mount device\&. "
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef struct FS_DRIVER FS_DRIVER"

.SS "typedef enum \fB_FS_WRITE_MODES\fP \fBFS_WRITE_MODES\fP"

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fB_FS_WRITE_MODES\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\f(BIWRITE_MODE_APPEND_EXISTING \fP
.TP
\f(BIWRITE_MODE_CREATE_OR_REPLACE \fP
.PP
Definition at line \fB13\fP of file \fBvfs\&.h\fP\&.
.SH "Function Documentation"
.PP 
.SS "\fBMTSTATUS\fP vfs_delete (const char * path)"

.PP
This function deletes the file given to the function from the system\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Full path to delete file\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status code\&.
.RE
.PP

.PP
Definition at line \fB94\fP of file \fBvfs\&.c\fP\&.
.SS "\fBMTSTATUS\fP vfs_init (void )"

.PP
Initialize the Virtual File System (initializes other filesystem needed services as well) 
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status Code
.RE
.PP

.PP
Definition at line \fB41\fP of file \fBvfs\&.c\fP\&.
.SS "bool vfs_is_dir_empty (const char * path)"

.PP
This function returns if the directory given to the function is empty (e\&.g, has only '\&.' and '\&.\&.' entries) 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Full path to dir
.RE
.PP
\fBReturns\fP
.RS 4
True or false based if empty or not\&.
.RE
.PP

.PP
Definition at line \fB122\fP of file \fBvfs\&.c\fP\&.
.SS "\fBMTSTATUS\fP vfs_listdir (const char * path, char * listings, size_t max_len)"

.PP
Lists the directory given\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Path to directory, e\&.g "mydir/" 
.br
\fIlistings\fP [OUT] Pointer to directory listing\&. (each seperated with a newline character)
.br
\fImax_len\fP [IN] Max size of listings buffer\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status code\&.
.RE
.PP

.PP
Definition at line \fB101\fP of file \fBvfs\&.c\fP\&.
.SS "void vfs_listrootdir (void )"

.PP
This function will list the root directory of the main mount device\&. 
.PP
Definition at line \fB129\fP of file \fBvfs\&.c\fP\&.
.SS "\fBMTSTATUS\fP vfs_mkdir (const char * path)"

.PP
Creates a new directory\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP The full path to the new directory
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status code\&.
.RE
.PP

.PP
Definition at line \fB108\fP of file \fBvfs\&.c\fP\&.
.SS "\fBMTSTATUS\fP vfs_read (const char * filename, uint32_t * file_size_out, void ** buffer_out)"

.PP
Reads the file into a buffer\&. 
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP The Filename to read, e\&.g "file\&.txt" or "tmp/folder/myfile\&.txt"
.br
\fIfile_size_out\fP A pointer to put the file size in bytes
.br
\fIbufferOut\fP A pointer to put the file buffer in (doesn't need to be dynamically allocated)
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status Code\&.
.RE
.PP

.PP
Definition at line \fB80\fP of file \fBvfs\&.c\fP\&.
.SS "\fBMTSTATUS\fP vfs_rmdir (const char * path)"

.PP
This function deletes the directory given to the function from the system\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Full path to delete directory\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status code\&.
.RE
.PP

.PP
Definition at line \fB115\fP of file \fBvfs\&.c\fP\&.
.SS "\fBMTSTATUS\fP vfs_write (const char * path, const void * data, uint32_t size, \fBFS_WRITE_MODES\fP write_mode)"

.PP
Creates a new file (or opens existing) and writes data to it\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP The full path of the file to create
.br
\fIdata\fP A pointer to the data to write\&.
.br
\fIsize\fP The number of bytes to write
.br
\fIwrite_mode\fP Whether to APPEND or CREATE/REPLACE the file\&. (in \fBFS_WRITE_MODES\fP enum)
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status Code
.RE
.PP

.PP
Definition at line \fB87\fP of file \fBvfs\&.c\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for MatanelOS from the source code\&.
