<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="assert_8h" kind="file" language="C++">
    <compoundname>assert.h</compoundname>
    <includedby refid="kernel_8h" local="yes">C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.h</includedby>
    <invincdepgraph>
      <node id="1">
        <label>C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/assert.h</label>
        <link refid="assert_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c</label>
        <link refid="kernel_8c"/>
      </node>
      <node id="2">
        <label>C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="assert_8h_1a3d4ae9c092e117c836f52dc7d7cee574" prot="public" static="no">
        <name>assert</name>
        <param><defname>...</defname></param>
        <initializer>do { } while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/assert.h" line="54" column="9" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/assert.h" bodystart="54" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>PROJECT:<sp/><sp/><sp/><sp/><sp/>MatanelOS<sp/>Kernel</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>LICENSE:<sp/><sp/><sp/><sp/><sp/>NONE</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>PURPOSE:<sp/><sp/><sp/><sp/><sp/>Runtime<sp/>Assertion<sp/>Implementation.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>X86_ASSERT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>X86_ASSERT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;bugcheck/bugcheck.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">__attribute__((noreturn))</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assert_fail(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>reason,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>func,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Getting<sp/>here<sp/>means<sp/>a<sp/>runtime<sp/>assertion<sp/>has<sp/>failed<sp/>(assert())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>BUGCHECK_ADDITIONALS<sp/>addt<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>can<sp/>be<sp/>versatile,<sp/>with<sp/>a<sp/>reason<sp/>or<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reason)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ksnprintf(addt.str,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(addt.str),<sp/></highlight><highlight class="stringliteral">&quot;An<sp/>assertion<sp/>has<sp/>failed<sp/>(%s)\nReason:<sp/>%s\nLocation:<sp/>%s:%d,<sp/>function<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>expr,<sp/>reason,<sp/>file,<sp/>line,<sp/>func);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernel_8h_1ac240bdf341c5e0ae333252cd5ecf0261" kindref="member">CTX_FRAME</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SAVE_CTX_FRAME(&amp;ctx);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MtBugcheckEx(&amp;ctx,<sp/>NULL,<sp/>ASSERTION_FAILURE,<sp/>&amp;addt,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ksnprintf(addt.str,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(addt.str),<sp/></highlight><highlight class="stringliteral">&quot;An<sp/>assertion<sp/>has<sp/>failed<sp/>(%s)\nLocation:<sp/>%s:%d,<sp/>function<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>expr,<sp/>file,<sp/>line,<sp/>func);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernel_8h_1ac240bdf341c5e0ae333252cd5ecf0261" kindref="member">CTX_FRAME</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SAVE_CTX_FRAME(&amp;ctx);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MtBugcheckEx(&amp;ctx,<sp/>NULL,<sp/>ASSERTION_FAILURE,<sp/>&amp;addt,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>__builtin_unreachable();</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>macros<sp/>for<sp/>argument<sp/>counting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GET_MACRO(_1,_2,NAME,...)<sp/>NAME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT1(expr)<sp/>\</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((expr)<sp/>?<sp/>(void)0<sp/>:<sp/>assert_fail(#expr,<sp/>NULL,<sp/>__FILE__,<sp/>__func__,<sp/>__LINE__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT2(expr,<sp/>reason)<sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((expr)<sp/>?<sp/>(void)0<sp/>:<sp/>assert_fail(#expr,<sp/>reason,<sp/>__FILE__,<sp/>__func__,<sp/>__LINE__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assert(expression)<sp/>OR<sp/>assert(expression,<sp/>&quot;expression<sp/>must<sp/>be<sp/>...&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>assert(...)<sp/>GET_MACRO(__VA_ARGS__,<sp/>ASSERT2,<sp/>ASSERT1)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Make<sp/>intellisense<sp/>be<sp/>quiet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assert(expression)<sp/>OR<sp/>assert(expression,<sp/>&quot;expression<sp/>must<sp/>be<sp/>...&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="assert_8h_1a3d4ae9c092e117c836f52dc7d7cee574" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>assert(...)<sp/>do<sp/>{<sp/>}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/assert.h"/>
  </compounddef>
</doxygen>
