<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="kernel_8c" kind="file" language="C++">
    <compoundname>kernel.c</compoundname>
    <includes refid="kernel_8h" local="yes">kernel.h</includes>
    <incdepgraph>
      <node id="9">
        <label>assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="1">
        <label>C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c</label>
        <link refid="kernel_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>time.h</label>
        <link refid="time_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>trace.h</label>
        <link refid="trace_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>bugcheck/bugcheck.h</label>
      </node>
      <node id="26">
        <label>cpu/apic/apic.h</label>
      </node>
      <node id="10">
        <label>cpu/cpu.h</label>
      </node>
      <node id="23">
        <label>cpu/cpuid/cpuid.h</label>
      </node>
      <node id="28">
        <label>cpu/events/events.h</label>
      </node>
      <node id="27">
        <label>cpu/mutex/mutex.h</label>
      </node>
      <node id="15">
        <label>defs/stdarg_myos.h</label>
      </node>
      <node id="21">
        <label>drivers/ahci/ahci.h</label>
      </node>
      <node id="20">
        <label>drivers/blk/block.h</label>
      </node>
      <node id="22">
        <label>drivers/gop/gop.h</label>
      </node>
      <node id="11">
        <label>filesystem/fat32/fat32.h</label>
      </node>
      <node id="25">
        <label>filesystem/vfs/vfs.h</label>
      </node>
      <node id="17">
        <label>interrupts/handlers/handlers.h</label>
      </node>
      <node id="16">
        <label>interrupts/idt.h</label>
      </node>
      <node id="8">
        <label>intrin/intrin.h</label>
      </node>
      <node id="19">
        <label>memory/allocator/allocator.h</label>
      </node>
      <node id="12">
        <label>memory/allocator/uefi_memory.h</label>
      </node>
      <node id="13">
        <label>memory/memory.h</label>
      </node>
      <node id="14">
        <label>memory/paging/paging.h</label>
      </node>
      <node id="6">
        <label>stdatomic.h</label>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="kernel_8c_1a9fed467298b3e70426485013c0caf964" prot="public" static="no">
        <name>MAX_AHCI_CONTROLLERS</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="12" column="9" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="kernel_8c_1ad6664187bc75188329b950c21f5f380a" prot="public" static="no">
        <name>MAX_MEMORY_MAP_SIZE</name>
        <initializer>0x4000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="31" column="9" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="kernel_8c_1a2d000697316631e744359a19471179c9" prot="public" static="no">
        <name>ISRAEL_UTC_OFFSET</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="260" column="9"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="kernel_8c_1a3764ef588283aaa224d9dd8d89a35c52" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t ahci_bases_local[MAX_AHCI_CONTROLLERS]</definition>
        <argsstring>[MAX_AHCI_CONTROLLERS]</argsstring>
        <name>ahci_bases_local</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="13" column="10" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="kernel_8c_1ad8ca0be32b831aec9de80bcf0e22107e" prot="public" static="no" mutable="no">
        <type>GOP_PARAMS</type>
        <definition>GOP_PARAMS gop_local</definition>
        <argsstring></argsstring>
        <name>gop_local</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="15" column="12" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="kernel_8c_1a5f06053b8248ece91f68e4ae8da74ee4" prot="public" static="no" mutable="no">
        <type><ref refid="kernel_8h_1aa7f93145770b2b55fa44fc8b9a2cf58d" kindref="member">BOOT_INFO</ref></type>
        <definition>BOOT_INFO boot_info_local</definition>
        <argsstring></argsstring>
        <name>boot_info_local</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="16" column="11" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="kernel_8c_1a3e4cb7a3337aa00fccafe03c7b5a59fc" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool isBugChecking</definition>
        <argsstring></argsstring>
        <name>isBugChecking</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="24" column="6" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="kernel_8c_1a84fdaa754c58bd3a02ef7e0c36cfff33" prot="public" static="no" mutable="no">
        <type><ref refid="struct_l_a_s_t_f_u_n_c___h_i_s_t_o_r_y" kindref="compound">LASTFUNC_HISTORY</ref></type>
        <definition>LASTFUNC_HISTORY lastfunc_history</definition>
        <argsstring></argsstring>
        <name>lastfunc_history</name>
        <initializer>= { .current_index = -1 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="25" column="18" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="variable" id="kernel_8c_1a0b2a3530e9a5998456be351b4251b878" prot="public" static="no" mutable="no">
        <type>CPU</type>
        <definition>CPU cpu</definition>
        <argsstring></argsstring>
        <name>cpu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="26" column="5" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="kernel_8c_1a98451f3246f4a4f2b0d59a19a7e2b0be" prot="public" static="yes" mutable="no">
        <type>EFI_MEMORY_DESCRIPTOR</type>
        <definition>EFI_MEMORY_DESCRIPTOR memory_map_copy[MAX_MEMORY_MAP_SIZE/sizeof(EFI_MEMORY_DESCRIPTOR)]</definition>
        <argsstring>[MAX_MEMORY_MAP_SIZE/sizeof(EFI_MEMORY_DESCRIPTOR)]</argsstring>
        <name>memory_map_copy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="33" column="30" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" bodystart="33" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="kernel_8c_1a26b7a33ce7ac27191c39745d6852acd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy_memory_map</definition>
        <argsstring>(BOOT_INFO *boot_info)</argsstring>
        <name>copy_memory_map</name>
        <param>
          <type><ref refid="kernel_8h_1aa7f93145770b2b55fa44fc8b9a2cf58d" kindref="member">BOOT_INFO</ref> *</type>
          <declname>boot_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="35" column="6" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" bodystart="35" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="kernel_8c_1a8bf2519b1a607ce677d092c706b92f00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy_gop</definition>
        <argsstring>(BOOT_INFO *boot_info)</argsstring>
        <name>copy_gop</name>
        <param>
          <type><ref refid="kernel_8h_1aa7f93145770b2b55fa44fc8b9a2cf58d" kindref="member">BOOT_INFO</ref> *</type>
          <declname>boot_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="51" column="6" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" bodystart="51" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="kernel_8c_1a1aeed12b2d6dcc95b0e4457dab2e891c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_boot_info</definition>
        <argsstring>(BOOT_INFO *boot_info)</argsstring>
        <name>init_boot_info</name>
        <param>
          <type><ref refid="kernel_8h_1aa7f93145770b2b55fa44fc8b9a2cf58d" kindref="member">BOOT_INFO</ref> *</type>
          <declname>boot_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="63" column="6" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" bodystart="63" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="kernel_8c_1a49961a69205678918149e52a5a7c2497" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void InitialiseControlRegisters</definition>
        <argsstring>(void)</argsstring>
        <name>InitialiseControlRegisters</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="80" column="13" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" bodystart="80" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="kernel_8c_1a4aa078dcf96e9f06ce620519a93593c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void InitCPU</definition>
        <argsstring>(void)</argsstring>
        <name>InitCPU</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="96" column="6" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" bodystart="96" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="kernel_8c_1a28a9a0febefcfa2822eda18e50ab6648" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool interrupts_enabled</definition>
        <argsstring>(void)</argsstring>
        <name>interrupts_enabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="105" column="20" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" bodystart="105" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="kernel_8c_1a9ce2606c20ea524922906d7816228c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kernel_idle_checks</definition>
        <argsstring>(void)</argsstring>
        <name>kernel_idle_checks</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="114" column="6" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" bodystart="114" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="kernel_8c_1a536ce602cba46097d044ec144974ce6e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test</definition>
        <argsstring>(MUTEX *mut)</argsstring>
        <name>test</name>
        <param>
          <type>MUTEX *</type>
          <declname>mut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="134" column="13" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" bodystart="134" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="kernel_8c_1aa575cf86f69a0bdbb2e80962421ea573" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void funcWithParam</definition>
        <argsstring>(MUTEX *mut)</argsstring>
        <name>funcWithParam</name>
        <param>
          <type>MUTEX *</type>
          <declname>mut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="150" column="13" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" bodystart="150" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="kernel_8c_1a290306ce314d46bd369c185b7b95db40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kernel_main</definition>
        <argsstring>(BOOT_INFO *boot_info)</argsstring>
        <name>kernel_main</name>
        <param>
          <type><ref refid="kernel_8h_1aa7f93145770b2b55fa44fc8b9a2cf58d" kindref="member">BOOT_INFO</ref> *</type>
          <declname>boot_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remember that paging is on when this is called, as UEFI turned it on. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" line="171" column="6" bodyfile="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c" bodystart="171" bodyend="281"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>PROJECT:<sp/><sp/><sp/><sp/><sp/><sp/>MatanelOS<sp/>Kernel</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>LICENSE:<sp/><sp/><sp/><sp/><sp/><sp/>GPLv3</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>PURPOSE:<sp/><sp/><sp/><sp/><sp/><sp/>Core<sp/>Kernel<sp/>Entry<sp/>Point<sp/>for<sp/>MatanelOS.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kernel_8h" kindref="compound">kernel.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">_Static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>==<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>Kernel<sp/>is<sp/>64<sp/>bit<sp/>only!<sp/>The<sp/>32bit<sp/>version<sp/>is<sp/>deprecated.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="kernel_8c_1a9fed467298b3e70426485013c0caf964" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_AHCI_CONTROLLERS<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="kernel_8c_1a3764ef588283aaa224d9dd8d89a35c52" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="kernel_8c_1a3764ef588283aaa224d9dd8d89a35c52" kindref="member">ahci_bases_local</ref>[<ref refid="kernel_8c_1a9fed467298b3e70426485013c0caf964" kindref="member">MAX_AHCI_CONTROLLERS</ref>];</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="kernel_8c_1ad8ca0be32b831aec9de80bcf0e22107e" refkind="member"><highlight class="normal">GOP_PARAMS<sp/><ref refid="kernel_8c_1ad8ca0be32b831aec9de80bcf0e22107e" kindref="member">gop_local</ref>;</highlight></codeline>
<codeline lineno="16" refid="kernel_8c_1a5f06053b8248ece91f68e4ae8da74ee4" refkind="member"><highlight class="normal"><ref refid="kernel_8h_1aa7f93145770b2b55fa44fc8b9a2cf58d" kindref="member">BOOT_INFO</ref><sp/><ref refid="kernel_8c_1a5f06053b8248ece91f68e4ae8da74ee4" kindref="member">boot_info_local</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//static<sp/>MUTEX<sp/>mutx;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//MUTEX*<sp/>sharedMutex<sp/>=<sp/>&amp;mutx;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="22"><highlight class="comment">Global<sp/>variables<sp/>initialization</highlight></codeline>
<codeline lineno="23"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="kernel_8c_1a3e4cb7a3337aa00fccafe03c7b5a59fc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="kernel_8c_1a3e4cb7a3337aa00fccafe03c7b5a59fc" kindref="member">isBugChecking</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25" refid="kernel_8c_1a84fdaa754c58bd3a02ef7e0c36cfff33" refkind="member"><highlight class="normal"><ref refid="struct_l_a_s_t_f_u_n_c___h_i_s_t_o_r_y" kindref="compound">LASTFUNC_HISTORY</ref><sp/><ref refid="kernel_8c_1a84fdaa754c58bd3a02ef7e0c36cfff33" kindref="member">lastfunc_history</ref><sp/>=<sp/>{<sp/>.current_index<sp/>=<sp/>-1<sp/>};</highlight></codeline>
<codeline lineno="26" refid="kernel_8c_1a0b2a3530e9a5998456be351b4251b878" refkind="member"><highlight class="normal">CPU<sp/><ref refid="kernel_8c_1a0b2a3530e9a5998456be351b4251b878" kindref="member">cpu</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="29"><highlight class="comment">Ended</highlight></codeline>
<codeline lineno="30"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="kernel_8c_1ad6664187bc75188329b950c21f5f380a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_MEMORY_MAP_SIZE<sp/>0x4000<sp/><sp/></highlight><highlight class="comment">//<sp/>16<sp/>KB,<sp/>enough<sp/>for<sp/>~256<sp/>descriptors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>EFI_MEMORY_DESCRIPTOR<sp/>memory_map_copy[<ref refid="kernel_8c_1ad6664187bc75188329b950c21f5f380a" kindref="member">MAX_MEMORY_MAP_SIZE</ref><sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(EFI_MEMORY_DESCRIPTOR)];</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="kernel_8c_1a26b7a33ce7ac27191c39745d6852acd1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="kernel_8c_1a26b7a33ce7ac27191c39745d6852acd1" kindref="member">copy_memory_map</ref>(<ref refid="kernel_8h_1aa7f93145770b2b55fa44fc8b9a2cf58d" kindref="member">BOOT_INFO</ref>*<sp/>boot_info)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!boot_info<sp/>||<sp/>!boot_info-&gt;MemoryMap)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boot_info-&gt;MapSize<sp/>&gt;<sp/><ref refid="kernel_8c_1ad6664187bc75188329b950c21f5f380a" kindref="member">MAX_MEMORY_MAP_SIZE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>error,<sp/>memory<sp/>map<sp/>too<sp/>big</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MtBugcheck(NULL,<sp/>NULL,<sp/>MEMORY_MAP_SIZE_OVERRUN,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>entire<sp/>memory<sp/>map<sp/>into<sp/>the<sp/>static<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>kmemcpy(memory_map_copy,<sp/>boot_info-&gt;MemoryMap,<sp/>boot_info-&gt;MapSize);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8c_1a5f06053b8248ece91f68e4ae8da74ee4" kindref="member">boot_info_local</ref>.MemoryMap<sp/>=<sp/>memory_map_copy;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8c_1a5f06053b8248ece91f68e4ae8da74ee4" kindref="member">boot_info_local</ref>.MapSize<sp/>=<sp/>boot_info-&gt;MapSize;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8c_1a5f06053b8248ece91f68e4ae8da74ee4" kindref="member">boot_info_local</ref>.DescriptorSize<sp/>=<sp/>boot_info-&gt;DescriptorSize;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8c_1a5f06053b8248ece91f68e4ae8da74ee4" kindref="member">boot_info_local</ref>.DescriptorVersion<sp/>=<sp/>boot_info-&gt;DescriptorVersion;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="kernel_8c_1a8bf2519b1a607ce677d092c706b92f00" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="kernel_8c_1a8bf2519b1a607ce677d092c706b92f00" kindref="member">copy_gop</ref>(<ref refid="kernel_8h_1aa7f93145770b2b55fa44fc8b9a2cf58d" kindref="member">BOOT_INFO</ref>*<sp/>boot_info)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!boot_info<sp/>||<sp/>!boot_info-&gt;Gop)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>GOP<sp/>data<sp/>to<sp/>a<sp/>local<sp/>global<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8c_1ad8ca0be32b831aec9de80bcf0e22107e" kindref="member">gop_local</ref><sp/>=<sp/>*(boot_info-&gt;Gop);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>all<sp/>relevant<sp/>pointers<sp/>to<sp/>point<sp/>to<sp/>the<sp/>local<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>boot_info-&gt;Gop<sp/>=<sp/>&amp;<ref refid="kernel_8c_1ad8ca0be32b831aec9de80bcf0e22107e" kindref="member">gop_local</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8c_1a5f06053b8248ece91f68e4ae8da74ee4" kindref="member">boot_info_local</ref>.Gop<sp/>=<sp/>&amp;<ref refid="kernel_8c_1ad8ca0be32b831aec9de80bcf0e22107e" kindref="member">gop_local</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="kernel_8c_1a1aeed12b2d6dcc95b0e4457dab2e891c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="kernel_8c_1a1aeed12b2d6dcc95b0e4457dab2e891c" kindref="member">init_boot_info</ref>(<ref refid="kernel_8h_1aa7f93145770b2b55fa44fc8b9a2cf58d" kindref="member">BOOT_INFO</ref>*<sp/>boot_info)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!boot_info)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8c_1a26b7a33ce7ac27191c39745d6852acd1" kindref="member">copy_memory_map</ref>(boot_info);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8c_1a8bf2519b1a607ce677d092c706b92f00" kindref="member">copy_gop</ref>(boot_info);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boot_info-&gt;AhciCount<sp/>&gt;<sp/><ref refid="kernel_8c_1a9fed467298b3e70426485013c0caf964" kindref="member">MAX_AHCI_CONTROLLERS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MtBugcheck(NULL,<sp/>NULL,<sp/>BAD_AHCI_COUNT,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>boot_info-&gt;AhciCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernel_8c_1a3764ef588283aaa224d9dd8d89a35c52" kindref="member">ahci_bases_local</ref>[i]<sp/>=<sp/>boot_info-&gt;AhciBarBases[i];</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8c_1a5f06053b8248ece91f68e4ae8da74ee4" kindref="member">boot_info_local</ref>.AhciBarBases<sp/>=<sp/><ref refid="kernel_8c_1a3764ef588283aaa224d9dd8d89a35c52" kindref="member">ahci_bases_local</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8c_1a5f06053b8248ece91f68e4ae8da74ee4" kindref="member">boot_info_local</ref>.AhciCount<sp/>=<sp/>boot_info-&gt;AhciCount;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8c_1a5f06053b8248ece91f68e4ae8da74ee4" kindref="member">boot_info_local</ref>.KernelStackTop<sp/>=<sp/>boot_info-&gt;KernelStackTop;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8c_1a5f06053b8248ece91f68e4ae8da74ee4" kindref="member">boot_info_local</ref>.Pml4Phys<sp/>=<sp/>boot_info-&gt;Pml4Phys;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitialiseControlRegisters(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CR0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>cr0<sp/>=<sp/>__read_cr0();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>cr0<sp/>|=<sp/>(1UL<sp/>&lt;&lt;<sp/>16);<sp/></highlight><highlight class="comment">//<sp/>Set<sp/>bit<sp/>16<sp/>(WRITE<sp/>PROTECT),<sp/>so<sp/>when<sp/>the<sp/>kernel<sp/>touches<sp/>read<sp/>only<sp/>memory<sp/>it<sp/>would<sp/>#PF.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DISABLE_CACHE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>cr0<sp/>|=<sp/>(1UL<sp/>&lt;&lt;<sp/>30);<sp/></highlight><highlight class="comment">//<sp/>Set<sp/>bit<sp/>30<sp/>(CACHE<sp/>DISABLE).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>__write_cr0(cr0);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CR4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>cr4<sp/>=<sp/>__read_cr4();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>cr4<sp/>|=<sp/>(1UL<sp/>&lt;&lt;<sp/>11);<sp/></highlight><highlight class="comment">//<sp/>Set<sp/>bit<sp/>11<sp/>-<sp/>User<sp/>Mode<sp/>Instruction<sp/>Prevention.<sp/>This&apos;ll<sp/>be<sp/>useful<sp/>against<sp/>user<sp/>mode<sp/>attacks<sp/>to<sp/>locate<sp/>IDT/GDT/LDT...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>__write_cr4(cr4);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="kernel_8c_1a4aa078dcf96e9f06ce620519a93593c1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="kernel_8c_1a4aa078dcf96e9f06ce620519a93593c1" kindref="member">InitCPU</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8c_1a0b2a3530e9a5998456be351b4251b878" kindref="member">cpu</ref>.currentIrql<sp/>=<sp/>PASSIVE_LEVEL;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8c_1a0b2a3530e9a5998456be351b4251b878" kindref="member">cpu</ref>.schedulerEnabled<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>since<sp/>NULL<sp/>is<sp/>0,<sp/>it<sp/>would<sp/>be<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8c_1a0b2a3530e9a5998456be351b4251b878" kindref="member">cpu</ref>.currentThread<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8c_1a0b2a3530e9a5998456be351b4251b878" kindref="member">cpu</ref>.readyQueue.head<sp/>=<sp/><ref refid="kernel_8c_1a0b2a3530e9a5998456be351b4251b878" kindref="member">cpu</ref>.readyQueue.tail<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>__writemsr(IA32_KERNEL_GS_BASE,<sp/>(uint64_t)<sp/>&amp;<sp/><ref refid="kernel_8c_1a0b2a3530e9a5998456be351b4251b878" kindref="member">cpu</ref>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>spinlock_init(&amp;<ref refid="kernel_8c_1a0b2a3530e9a5998456be351b4251b878" kindref="member">cpu</ref>.readyQueue.lock);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>interrupts_enabled(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm__<sp/>__volatile__(</highlight><highlight class="stringliteral">&quot;pushfq;<sp/>popq<sp/>%0&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(flags)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>(1UL<sp/>&lt;&lt;<sp/>9))<sp/>!=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>IF<sp/>is<sp/>bit<sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="kernel_8c_1a9ce2606c20ea524922906d7816228c26" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="kernel_8c_1a9ce2606c20ea524922906d7816228c26" kindref="member">kernel_idle_checks</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>tracelast_func(</highlight><highlight class="stringliteral">&quot;kernel_idle_checks<sp/>-<sp/>Thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first_time<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_time)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_time<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernel_8h_1a29f75e67ea1a76410256bf17f8226e05" kindref="member">gop_printf_forced</ref>(0xFF000FF0,<sp/></highlight><highlight class="stringliteral">&quot;Reached<sp/>the<sp/>scheduler!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100000000ULL;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>loop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernel_8h_1a29f75e67ea1a76410256bf17f8226e05" kindref="member">gop_printf_forced</ref>(0xFF000FF0,<sp/></highlight><highlight class="stringliteral">&quot;**Ended<sp/>Testing<sp/>Thread<sp/>Execution**\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1a3d4ae9c092e117c836f52dc7d7cee574" kindref="member">assert</ref>((interrupts_enabled())<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Interrupts<sp/>are<sp/>not<sp/>enabled...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__hlt();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Schedule();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test(MUTEX*<sp/>mut)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>tracelast_func(</highlight><highlight class="stringliteral">&quot;test<sp/>-<sp/>Thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>Thread*<sp/>currentThread<sp/>=<sp/>MtGetCurrentThread();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8h_1a29f75e67ea1a76410256bf17f8226e05" kindref="member">gop_printf_forced</ref>(0xFF00FF00,<sp/></highlight><highlight class="stringliteral">&quot;Hit<sp/>Test!<sp/>test<sp/>thread<sp/>ptr:<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>currentThread);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>gop_printf(COLOR_GREEN,<sp/></highlight><highlight class="stringliteral">&quot;(test)<sp/>Acquiring<sp/>Mutex<sp/>Object:<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>mut);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mtstatus_8h_1a7c794b38d203a5b842f27b12fb55495a" kindref="member">MTSTATUS</ref><sp/>status<sp/>=<sp/>MtAcquireMutexObject(mut);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>gop_printf(COLOR_GREEN,<sp/></highlight><highlight class="stringliteral">&quot;(test)<sp/>status<sp/>returned:<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>status);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint64_t<sp/>z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>0xFFFFFFF;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z++;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>gop_printf(COLOR_GREEN,<sp/></highlight><highlight class="stringliteral">&quot;(test)<sp/>Releasing<sp/>Mutex<sp/>Object:<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>mut);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>MtReleaseMutexObject(mut);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8h_1a29f75e67ea1a76410256bf17f8226e05" kindref="member">gop_printf_forced</ref>(0xFFA020F0,<sp/></highlight><highlight class="stringliteral">&quot;**Ended<sp/>Test.**\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>funcWithParam(MUTEX*<sp/>mut)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>tracelast_func(</highlight><highlight class="stringliteral">&quot;funcWithParam<sp/>-<sp/>Thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//gop_printf_forced(COLOR_OLIVE,<sp/>&quot;Hit<sp/>funcWithParam,<sp/>Integer:<sp/>%d\n&quot;,<sp/>*integer);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>gop_printf(COLOR_OLIVE,<sp/></highlight><highlight class="stringliteral">&quot;Hit<sp/>funcWithParam<sp/>-<sp/>funcWithParam<sp/>threadptr:<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>MtGetCurrentThread());</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[256];</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>ksnprintf(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/></highlight><highlight class="stringliteral">&quot;In<sp/>funcwithParam!<sp/>-<sp/>thread<sp/>ptr:<sp/>%p,<sp/>mutex<sp/>ptr:<sp/>%p&quot;</highlight><highlight class="normal">,<sp/>MtGetCurrentThread(),<sp/>mut);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>vfs_write(</highlight><highlight class="stringliteral">&quot;/test.txt&quot;</highlight><highlight class="normal">,<sp/>buf,<sp/>kstrlen(buf),<sp/>WRITE_MODE_CREATE_OR_REPLACE);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>gop_printf(COLOR_OLIVE,<sp/></highlight><highlight class="stringliteral">&quot;(funcWithParam)<sp/>Acquiring<sp/>Mutex<sp/>Object:<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>mut);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>MtAcquireMutexObject(mut);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint64_t<sp/>z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>0xFFFFFFF;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z++;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>gop_printf(COLOR_OLIVE,<sp/></highlight><highlight class="stringliteral">&quot;(funcWithParam)<sp/>Releasing<sp/>Mutex<sp/>Object:<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>mut);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>MtReleaseMutexObject(mut);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>Thread*<sp/>currentThread<sp/>=<sp/>MtGetCurrentThread();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>gop_printf(COLOR_OLIVE,<sp/></highlight><highlight class="stringliteral">&quot;Current<sp/>thread<sp/>in<sp/>funcWithParam:<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>currentThread);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8h_1a29f75e67ea1a76410256bf17f8226e05" kindref="member">gop_printf_forced</ref>(COLOR_OLIVE,<sp/></highlight><highlight class="stringliteral">&quot;**Ended<sp/>funcWithParam.**\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="kernel_8c_1a290306ce314d46bd369c185b7b95db40" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="kernel_8c_1a290306ce314d46bd369c185b7b95db40" kindref="member">kernel_main</ref>(<ref refid="kernel_8h_1aa7f93145770b2b55fa44fc8b9a2cf58d" kindref="member">BOOT_INFO</ref>*<sp/>boot_info)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//tracelast_func(&quot;kernel_main&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>CORE<sp/>SYSTEM<sp/>INITIALIZATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>__cli();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>CR<sp/>(Control<sp/>Registers)<sp/>registers<sp/>to<sp/>our<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialiseControlRegisters();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Zero<sp/>the<sp/>BSS.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>zero_bss();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>local<sp/>boot<sp/>struct.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8c_1a1aeed12b2d6dcc95b0e4457dab2e891c" kindref="member">init_boot_info</ref>(boot_info);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>global<sp/>CPU<sp/>struct.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8c_1a4aa078dcf96e9f06ce620519a93593c1" kindref="member">InitCPU</ref>();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>interrupts<sp/>&amp;<sp/>exceptions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>init_interrupts();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>frame<sp/>bitmaps<sp/>for<sp/>dynamic<sp/>frame<sp/>allocation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>frame_bitmap_init();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finally,<sp/>initialize<sp/>our<sp/>heap<sp/>for<sp/>memory<sp/>allocation<sp/>(like<sp/>threads,<sp/>processes,<sp/>structs..)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>init_heap();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>_MtSetIRQL(PASSIVE_LEVEL);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initiate<sp/>Scheduler<sp/>and<sp/>DPCs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>InitScheduler();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>init_dpc_system();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>gop_clear_screen(&amp;<ref refid="kernel_8c_1ad8ca0be32b831aec9de80bcf0e22107e" kindref="member">gop_local</ref>,<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>0<sp/>is<sp/>just<sp/>black.<sp/>(0x0000000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//MemoryTestStable();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//__cli();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//__hlt();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/>cursor_x,<sp/>cursor_y;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>cursor_x<sp/>=<sp/>cursor_y<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>set<sp/>to<sp/>0,<sp/>since<sp/>it<sp/>somehow<sp/>decrements<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>rip;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;lea<sp/>1f(%%rip),<sp/>%0\n\t&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>address<sp/>of<sp/>label<sp/>1<sp/>relative<sp/>to<sp/>RIP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1:&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>label<sp/>whose<sp/>address<sp/>we<sp/>want</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(rip)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Output<sp/>to<sp/>the<sp/>&apos;rip&apos;<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8h_1a29f75e67ea1a76410256bf17f8226e05" kindref="member">gop_printf_forced</ref>(0xFFFFFF00,<sp/></highlight><highlight class="stringliteral">&quot;Current<sp/>RIP:<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>rip);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rip<sp/>&gt;=<sp/>KERNEL_VA_START)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernel_8h_1a29f75e67ea1a76410256bf17f8226e05" kindref="member">gop_printf_forced</ref>(0x00FF00FF,<sp/></highlight><highlight class="stringliteral">&quot;**[+]<sp/>Running<sp/>in<sp/>higher-half**\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernel_8h_1a29f75e67ea1a76410256bf17f8226e05" kindref="member">gop_printf_forced</ref>(0xFF0000FF,<sp/></highlight><highlight class="stringliteral">&quot;[-]<sp/>Still<sp/>identity-mapped\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buf<sp/>=<sp/>MtAllocateVirtualMemory(64,<sp/>16);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8h_1a29f75e67ea1a76410256bf17f8226e05" kindref="member">gop_printf_forced</ref>(0xFFFFFF00,<sp/></highlight><highlight class="stringliteral">&quot;buf<sp/>addr:<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>buf);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buf2<sp/>=<sp/>MtAllocateVirtualMemory(128,<sp/>16);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8h_1a29f75e67ea1a76410256bf17f8226e05" kindref="member">gop_printf_forced</ref>(0xFFFFFF00,<sp/></highlight><highlight class="stringliteral">&quot;buf2<sp/>addr:<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>buf2);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>MtFreeVirtualMemory(buf2);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buf3<sp/>=<sp/>MtAllocateVirtualMemory(128,<sp/>16);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8h_1a29f75e67ea1a76410256bf17f8226e05" kindref="member">gop_printf_forced</ref>(0xFFFFFF00,<sp/></highlight><highlight class="stringliteral">&quot;buf3<sp/>addr<sp/>(should<sp/>be<sp/>same<sp/>as<sp/>buf2):<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>buf3);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buf4<sp/>=<sp/>MtAllocateVirtualMemory(2048,<sp/>16);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8h_1a29f75e67ea1a76410256bf17f8226e05" kindref="member">gop_printf_forced</ref>(0xFF964B00,<sp/></highlight><highlight class="stringliteral">&quot;buf4<sp/>addr<sp/>(should<sp/>reside<sp/>after<sp/>buf3,<sp/>allocated<sp/>2048<sp/>bytes):<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>buf4);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buf5<sp/>=<sp/>MtAllocateVirtualMemory(64,<sp/>16);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8h_1a29f75e67ea1a76410256bf17f8226e05" kindref="member">gop_printf_forced</ref>(0xFF964B00,<sp/></highlight><highlight class="stringliteral">&quot;buf5<sp/>addr<sp/>(should<sp/>be<sp/>a<sp/>larger<sp/>addr):<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>buf5);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buf6<sp/>=<sp/>MtAllocateVirtualMemory(5000,<sp/>64);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8h_1a29f75e67ea1a76410256bf17f8226e05" kindref="member">gop_printf_forced</ref>(0xFFFFFF00,<sp/></highlight><highlight class="stringliteral">&quot;buf6<sp/>addr<sp/>(should<sp/>use<sp/>dynamic<sp/>memory):<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>buf6);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buf7<sp/>=<sp/>MtAllocateVirtualMemory(10000,<sp/>128);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8h_1a29f75e67ea1a76410256bf17f8226e05" kindref="member">gop_printf_forced</ref>(0xFFFFFF00,<sp/></highlight><highlight class="stringliteral">&quot;buf7<sp/>addr<sp/>(should<sp/>use<sp/>dynamic<sp/>memory,<sp/>extremely<sp/>larger):<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>buf7);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>gop_printf(COLOR_ORANGE,<sp/></highlight><highlight class="stringliteral">&quot;Address:<sp/>%p<sp/>is<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>addr,<sp/>MtIsAddressValid(addr)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Valid&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Invalid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>gop_printf(COLOR_ORANGE,<sp/></highlight><highlight class="stringliteral">&quot;Address<sp/>%p<sp/>(buf7)<sp/>is<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>buf7,<sp/>MtIsAddressValid(buf7)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Valid&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Invalid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>gop_printf(COLOR_MAGENTA,<sp/></highlight><highlight class="stringliteral">&quot;BUF7<sp/>(VIRT):<sp/>%p<sp/>|<sp/>(PHYS):<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>buf7,<sp/>MtTranslateVirtualToPhysical(buf7));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CAUSE_BUGCHECK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernel_8h_1ac240bdf341c5e0ae333252cd5ecf0261" kindref="member">CTX_FRAME</ref><sp/>regs;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>SAVE_CTX_FRAME(&amp;regs);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>MtBugcheck(&amp;regs,<sp/>NULL,<sp/>MANUALLY_INITIATED_CRASH,<sp/>0xDEADBEEF,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checkcpuid())<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[256];</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getCpuName(str);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gop_printf(COLOR_GREEN,<sp/></highlight><highlight class="stringliteral">&quot;CPU<sp/>Identified:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>str);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mtstatus_8h_1a7c794b38d203a5b842f27b12fb55495a" kindref="member">MTSTATUS</ref><sp/>status;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>vfs_init();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>gop_printf(COLOR_RED,<sp/></highlight><highlight class="stringliteral">&quot;vfs_init<sp/>returned:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="mtstatus_8h_1ab1c4c30274cca0fd5c0920b0df2ad26c" kindref="member">MT_SUCCEEDED</ref>(status)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Success&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Unsuccessful&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="mtstatus_8h_1a51b65f92cdedadf23a01dff0f9f4fac7" kindref="member">MT_FAILURE</ref>(status))<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernel_8h_1ac240bdf341c5e0ae333252cd5ecf0261" kindref="member">CTX_FRAME</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SAVE_CTX_FRAME(&amp;ctx);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MtBugcheck(&amp;ctx,<sp/>NULL,<sp/>FILESYSTEM_PANIC,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_i_m_e___e_n_t_r_y" kindref="compound">TIME_ENTRY</ref><sp/>currTime<sp/>=<sp/>get_time();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ISRAEL_UTC_OFFSET<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>gop_printf(COLOR_GREEN,<sp/></highlight><highlight class="stringliteral">&quot;Current<sp/>Time:<sp/>%d/%d/%d<sp/>|<sp/>%d:%d:%d\n&quot;</highlight><highlight class="normal">,<sp/>currTime.<ref refid="struct_t_i_m_e___e_n_t_r_y_1a57ca98d8f6d4baf0fe41c583c7dcb0d5" kindref="member">year</ref>,<sp/>currTime.<ref refid="struct_t_i_m_e___e_n_t_r_y_1a3e00faf7fbf9805e9ec4d2edd6339050" kindref="member">month</ref>,<sp/>currTime.<ref refid="struct_t_i_m_e___e_n_t_r_y_1a72369a1087b2aeffe374bb054cb97c12" kindref="member">day</ref>,<sp/>currTime.<ref refid="struct_t_i_m_e___e_n_t_r_y_1ae5af4ff48939d13d480f87e56a9385d6" kindref="member">hour</ref><sp/>+<sp/><ref refid="kernel_8c_1a2d000697316631e744359a19471179c9" kindref="member">ISRAEL_UTC_OFFSET</ref>,<sp/>currTime.<ref refid="struct_t_i_m_e___e_n_t_r_y_1a8ff981ec55c945940f4a0da7d8709b3c" kindref="member">minute</ref>,<sp/>currTime.<ref refid="struct_t_i_m_e___e_n_t_r_y_1a8459fc4e94de7eefc74991e41779c8fc" kindref="member">second</ref>);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>listings[256];</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>vfs_listdir(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>listings,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(listings));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>gop_printf(COLOR_RED,<sp/></highlight><highlight class="stringliteral">&quot;vfs_listdir<sp/>returned:<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>status);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>gop_printf(COLOR_RED,<sp/></highlight><highlight class="stringliteral">&quot;root<sp/>directory<sp/>is:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>vfs_is_dir_empty(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Empty&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>Empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>gop_printf(COLOR_CYAN,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>listings);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>MUTEX*<sp/>sharedMutex<sp/>=<sp/>MtAllocateVirtualMemory(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(MUTEX),<sp/>_Alignof(MUTEX));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sharedMutex)<sp/>{<sp/>gop_printf(COLOR_RED,<sp/></highlight><highlight class="stringliteral">&quot;It&apos;s<sp/>null\n&quot;</highlight><highlight class="normal">);<sp/>__hlt();<sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>MtInitializeMutexObject(sharedMutex);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>gop_printf(COLOR_RED,<sp/></highlight><highlight class="stringliteral">&quot;[MTSTATUS]<sp/>MtInitializeObject<sp/>Returned:<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>status);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>MtCreateThread((ThreadEntry)test,<sp/>sharedMutex,<sp/>DEFAULT_TIMESLICE_TICKS,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>integer<sp/>=<sp/>1234;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>MtCreateThread((ThreadEntry)funcWithParam,<sp/>sharedMutex,<sp/>DEFAULT_TIMESLICE_TICKS,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>I<sp/>have<sp/>tested<sp/>5+<sp/>threads,<sp/>works<sp/>perfectly<sp/>as<sp/>it<sp/>should.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>LAPIC<sp/>Now.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>lapic_init_bsp();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>lapic_enable();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>init_lapic_timer(100);<sp/></highlight><highlight class="comment">//<sp/>10ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>__sti();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>Schedule();</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/kernel.c"/>
  </compounddef>
</doxygen>
