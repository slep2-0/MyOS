.TH "C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/memory/paging/paging.c" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/memory/paging/paging.c
.SH SYNOPSIS
.br
.PP
\fR#include 'paging\&.h'\fP
.br
\fR#include '\&.\&./\&.\&./interrupts/idt\&.h'\fP
.br
\fR#include '\&.\&./memory\&.h'\fP
.br
\fR#include '\&.\&./\&.\&./drivers/ahci/ahci\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBPAGE_ENTRIES\fP   512"
.br
.ti -1c
.RI "#define \fBPAGE_SIZE_4K\fP   0x1000"
.br
.ti -1c
.RI "#define \fBPAGE_MASK\fP   0xFFFULL"
.br
.ti -1c
.RI "#define \fBPAGE_ALIGN_DOWN\fP(x)"
.br
.ti -1c
.RI "#define \fBPAGE_ALIGN_UP\fP(x)"
.br
.ti -1c
.RI "#define \fBRECURSIVE_INDEX\fP   0x1FF"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBmap_page\fP (void *virtualaddress, uintptr_t physicaladdress, uint64_t flags)"
.br
.ti -1c
.RI "bool \fBunmap_page\fP (void *virtualaddress)"
.br
.ti -1c
.RI "void \fBset_page_writable\fP (void *virtualaddress, bool writable)"
.br
.ti -1c
.RI "void \fBset_page_user_access\fP (void *virtualaddress, bool user_accessible)"
.br
.ti -1c
.RI "void \fBMtAddPageFlags\fP (void *virtualaddress, uint64_t flags)"
.br
.RI "This function adds (doesn't set) flags to the specified virtual address (if exists)\&. This DOES NOT set flags! (Which means flags that are ON will stay ON and will not get rewritten) "
.ti -1c
.RI "bool \fBMtIsAddressValid\fP (void *virtualAddr)"
.br
.RI "This function checks if the virtual address given to it, is valid and present in the page tables of the kernel\&. "
.ti -1c
.RI "uintptr_t \fBMtTranslateVirtualToPhysical\fP (void *virtualaddress)"
.br
.RI "This function translates the virtual address to its corresponding physical address in the page tables if present\&. "
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define PAGE_ALIGN_DOWN( x)"
\fBValue:\fP
.nf
((x) & ~PAGE_MASK)
.PP
.fi

.PP
Definition at line \fB18\fP of file \fBpaging\&.c\fP\&.
.SS "#define PAGE_ALIGN_UP( x)"
\fBValue:\fP
.nf
(((x) + PAGE_MASK) & ~PAGE_MASK)
.PP
.fi

.PP
Definition at line \fB19\fP of file \fBpaging\&.c\fP\&.
.SS "#define PAGE_ENTRIES   512"

.PP
Definition at line \fB13\fP of file \fBpaging\&.c\fP\&.
.SS "#define PAGE_MASK   0xFFFULL"

.PP
Definition at line \fB17\fP of file \fBpaging\&.c\fP\&.
.SS "#define PAGE_SIZE_4K   0x1000"

.PP
Definition at line \fB14\fP of file \fBpaging\&.c\fP\&.
.SS "#define RECURSIVE_INDEX   0x1FF"

.PP
Definition at line \fB20\fP of file \fBpaging\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "void map_page (void * virtualaddress, uintptr_t physicaladdress, uint64_t flags)"

.PP
Definition at line \fB97\fP of file \fBpaging\&.c\fP\&.
.SS "void MtAddPageFlags (void * virtualaddress, uint64_t flags)"

.PP
This function adds (doesn't set) flags to the specified virtual address (if exists)\&. This DOES NOT set flags! (Which means flags that are ON will stay ON and will not get rewritten) 
.PP
\fBParameters\fP
.RS 4
\fIvirtualaddress\fP VA
.br
\fIflags\fP PAGE_FLAGS flags\&.
.RE
.PP

.PP
Definition at line \fB251\fP of file \fBpaging\&.c\fP\&.
.SS "bool MtIsAddressValid (void * virtualAddr)"

.PP
This function checks if the virtual address given to it, is valid and present in the page tables of the kernel\&. 
.PP
\fBParameters\fP
.RS 4
\fIvirtualAddr\fP 
.RE
.PP
\fBReturns\fP
.RS 4
True or False based if present or not\&.
.RE
.PP

.PP
Definition at line \fB285\fP of file \fBpaging\&.c\fP\&.
.SS "uintptr_t MtTranslateVirtualToPhysical (void * virtualaddress)"

.PP
This function translates the virtual address to its corresponding physical address in the page tables if present\&. 
.PP
\fBParameters\fP
.RS 4
\fIvirtualaddress\fP 
.RE
.PP
\fBReturns\fP
.RS 4
Physical Address or 0 if not found\&.
.RE
.PP

.PP
Definition at line \fB314\fP of file \fBpaging\&.c\fP\&.
.SS "void set_page_user_access (void * virtualaddress, bool user_accessible)"

.PP
Definition at line \fB212\fP of file \fBpaging\&.c\fP\&.
.SS "void set_page_writable (void * virtualaddress, bool writable)"

.PP
Definition at line \fB172\fP of file \fBpaging\&.c\fP\&.
.SS "bool unmap_page (void * virtualaddress)"

.PP
Definition at line \fB138\fP of file \fBpaging\&.c\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
