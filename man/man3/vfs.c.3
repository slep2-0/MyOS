.TH "C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/filesystem/vfs/vfs.c" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/filesystem/vfs/vfs.c
.SH SYNOPSIS
.br
.PP
\fR#include 'vfs\&.h'\fP
.br
\fR#include '\&.\&./\&.\&./drivers/ahci/ahci\&.h'\fP
.br
\fR#include '\&.\&./fat32/fat32\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBMOUNTED_FS\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBMAX_MOUNTS\fP   4"
.br
.ti -1c
.RI "#define \fBMAIN_FS_DEVICE\fP   0"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct MOUNTED_FS \fBMOUNTED_FS\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBMTSTATUS\fP \fBvfs_init\fP (void)"
.br
.RI "Initialize the Virtual File System (initializes other filesystem needed services as well) "
.ti -1c
.RI "\fBMTSTATUS\fP \fBvfs_read\fP (const char *filename, uint32_t *file_size_out, void **buffer_out)"
.br
.RI "Reads the file into a buffer\&. "
.ti -1c
.RI "\fBMTSTATUS\fP \fBvfs_write\fP (const char *path, const void *data, uint32_t size, \fBFS_WRITE_MODES\fP write_mode)"
.br
.RI "Creates a new file (or opens existing) and writes data to it\&. "
.ti -1c
.RI "\fBMTSTATUS\fP \fBvfs_delete\fP (const char *path)"
.br
.RI "This function deletes the file given to the function from the system\&. "
.ti -1c
.RI "\fBMTSTATUS\fP \fBvfs_listdir\fP (const char *path, char *listings, size_t max_len)"
.br
.RI "Lists the directory given\&. "
.ti -1c
.RI "\fBMTSTATUS\fP \fBvfs_mkdir\fP (const char *path)"
.br
.RI "Creates a new directory\&. "
.ti -1c
.RI "\fBMTSTATUS\fP \fBvfs_rmdir\fP (const char *path)"
.br
.RI "This function deletes the directory given to the function from the system\&. "
.ti -1c
.RI "bool \fBvfs_is_dir_empty\fP (const char *path)"
.br
.RI "This function returns if the directory given to the function is empty (e\&.g, has only '\&.' and '\&.\&.' entries) "
.ti -1c
.RI "void \fBvfs_listrootdir\fP (void)"
.br
.RI "This function will list the root directory of the main mount device\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBFS_DRIVER\fP \fBfat32_driver\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define MAIN_FS_DEVICE   0"

.PP
Definition at line \fB22\fP of file \fBvfs\&.c\fP\&.
.SS "#define MAX_MOUNTS   4"

.PP
Definition at line \fB18\fP of file \fBvfs\&.c\fP\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct MOUNTED_FS MOUNTED_FS"

.SH "Function Documentation"
.PP 
.SS "\fBMTSTATUS\fP vfs_delete (const char * path)"

.PP
This function deletes the file given to the function from the system\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Full path to delete file\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status code\&.
.RE
.PP

.PP
Definition at line \fB94\fP of file \fBvfs\&.c\fP\&.
.SS "\fBMTSTATUS\fP vfs_init (void )"

.PP
Initialize the Virtual File System (initializes other filesystem needed services as well) 
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status Code
.RE
.PP

.PP
Definition at line \fB41\fP of file \fBvfs\&.c\fP\&.
.SS "bool vfs_is_dir_empty (const char * path)"

.PP
This function returns if the directory given to the function is empty (e\&.g, has only '\&.' and '\&.\&.' entries) 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Full path to dir
.RE
.PP
\fBReturns\fP
.RS 4
True or false based if empty or not\&.
.RE
.PP

.PP
Definition at line \fB122\fP of file \fBvfs\&.c\fP\&.
.SS "\fBMTSTATUS\fP vfs_listdir (const char * path, char * listings, size_t max_len)"

.PP
Lists the directory given\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Path to directory, e\&.g "mydir/" 
.br
\fIlistings\fP [OUT] Pointer to directory listing\&. (each seperated with a newline character)
.br
\fImax_len\fP [IN] Max size of listings buffer\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status code\&.
.RE
.PP

.PP
Definition at line \fB101\fP of file \fBvfs\&.c\fP\&.
.SS "void vfs_listrootdir (void )"

.PP
This function will list the root directory of the main mount device\&. 
.PP
Definition at line \fB129\fP of file \fBvfs\&.c\fP\&.
.SS "\fBMTSTATUS\fP vfs_mkdir (const char * path)"

.PP
Creates a new directory\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP The full path to the new directory
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status code\&.
.RE
.PP

.PP
Definition at line \fB108\fP of file \fBvfs\&.c\fP\&.
.SS "\fBMTSTATUS\fP vfs_read (const char * filename, uint32_t * file_size_out, void ** buffer_out)"

.PP
Reads the file into a buffer\&. 
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP The Filename to read, e\&.g "file\&.txt" or "tmp/folder/myfile\&.txt"
.br
\fIfile_size_out\fP A pointer to put the file size in bytes
.br
\fIbufferOut\fP A pointer to put the file buffer in (doesn't need to be dynamically allocated)
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status Code\&.
.RE
.PP

.PP
Definition at line \fB80\fP of file \fBvfs\&.c\fP\&.
.SS "\fBMTSTATUS\fP vfs_rmdir (const char * path)"

.PP
This function deletes the directory given to the function from the system\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Full path to delete directory\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status code\&.
.RE
.PP

.PP
Definition at line \fB115\fP of file \fBvfs\&.c\fP\&.
.SS "\fBMTSTATUS\fP vfs_write (const char * path, const void * data, uint32_t size, \fBFS_WRITE_MODES\fP write_mode)"

.PP
Creates a new file (or opens existing) and writes data to it\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP The full path of the file to create
.br
\fIdata\fP A pointer to the data to write\&.
.br
\fIsize\fP The number of bytes to write
.br
\fIwrite_mode\fP Whether to APPEND or CREATE/REPLACE the file\&. (in \fBFS_WRITE_MODES\fP enum)
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status Code
.RE
.PP

.PP
Definition at line \fB87\fP of file \fBvfs\&.c\fP\&.
.SH "Variable Documentation"
.PP 
.SS "\fBFS_DRIVER\fP fat32_driver"
\fBInitial value:\fP
.nf
= {
    \&.init = fat32_fs_init,
    \&.read = fat32_read_file,
    \&.write = fat32_write_file,
    \&.delete = fat32_delete_file,
    \&.listdir = fat32_list_directory,
    \&.mkdir = fat32_create_directory,
    \&.rmdir = fat32_delete_directory,
    \&.is_dir_empty = fat32_directory_is_empty,
    \&.listrootdir = fat32_list_root,
}
.PP
.fi

.PP
Definition at line \fB29\fP of file \fBvfs\&.c\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
