.TH "C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/filesystem/fat32/fat32.c" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/matanel/Desktop/Projects/KernelDevelopment/kernel/filesystem/fat32/fat32.c
.SH SYNOPSIS
.br
.PP
\fR#include 'fat32\&.h'\fP
.br
\fR#include '\&.\&./\&.\&./drivers/blk/block\&.h'\fP
.br
\fR#include '\&.\&./\&.\&./assert\&.h'\fP
.br
\fR#include '\&.\&./\&.\&./time\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBLFN_ENTRY_BUFFER\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBWRITE_MODE_APPEND_EXISTING\fP   0"
.br
.ti -1c
.RI "#define \fBWRITE_MODE_CREATE_OR_REPLACE\fP   1"
.br
.ti -1c
.RI "#define \fBMAX_LFN_ENTRIES\fP   20"
.br
.ti -1c
.RI "#define \fBMAX_LFN_LEN\fP   260"
.br
.ti -1c
.RI "#define \fBBPB_SECTOR_START\fP   2048"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBMTSTATUS\fP \fBfat32_init\fP (int disk_index)"
.br
.ti -1c
.RI "void \fBfat32_list_root\fP (void)"
.br
.ti -1c
.RI "\fBMTSTATUS\fP \fBfat32_read_file\fP (const char *filename, uint32_t *file_size_out, void **buffer_out)"
.br
.RI "A FAT32 Function that reads the file requested into a dynamically allocated buffer\&. "
.ti -1c
.RI "\fBMTSTATUS\fP \fBfat32_create_directory\fP (const char *path)"
.br
.RI "Creates a new directory\&. "
.ti -1c
.RI "\fBMTSTATUS\fP \fBfat32_write_file\fP (const char *path, const void *data, uint32_t size, uint32_t mode)"
.br
.RI "Creates a new file and writes data to it\&. "
.ti -1c
.RI "\fBMTSTATUS\fP \fBfat32_list_directory\fP (const char *path, char *listings, size_t max_len)"
.br
.RI "Lists the directory given\&. "
.ti -1c
.RI "bool \fBfat32_directory_is_empty\fP (const char *path)"
.br
.RI "This function returns if the directory given to the function is empty (e\&.g, has only '\&.' and '\&.\&.' entries) "
.ti -1c
.RI "\fBMTSTATUS\fP \fBfat32_delete_directory\fP (const char *path)"
.br
.RI "This function deletes the directory given to the function from the system\&. "
.ti -1c
.RI "\fBMTSTATUS\fP \fBfat32_delete_file\fP (const char *path)"
.br
.RI "This function deletes the file given to the function from the system\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBGOP_PARAMS\fP \fBgop_local\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define BPB_SECTOR_START   2048"

.PP
Definition at line \fB528\fP of file \fBfat32\&.c\fP\&.
.SS "#define MAX_LFN_ENTRIES   20"

.PP
Definition at line \fB21\fP of file \fBfat32\&.c\fP\&.
.SS "#define MAX_LFN_LEN   260"

.PP
Definition at line \fB22\fP of file \fBfat32\&.c\fP\&.
.SS "#define WRITE_MODE_APPEND_EXISTING   0"

.PP
Definition at line \fB12\fP of file \fBfat32\&.c\fP\&.
.SS "#define WRITE_MODE_CREATE_OR_REPLACE   1"

.PP
Definition at line \fB13\fP of file \fBfat32\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "\fBMTSTATUS\fP fat32_create_directory (const char * path)"

.PP
Creates a new directory\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP The full path to the new directory
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status code\&.
.RE
.PP

.PP
Definition at line \fB836\fP of file \fBfat32\&.c\fP\&.
.SS "\fBMTSTATUS\fP fat32_delete_directory (const char * path)"

.PP
This function deletes the directory given to the function from the system\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Full path to delete directory\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status code\&.
.RE
.PP

.PP
Definition at line \fB1761\fP of file \fBfat32\&.c\fP\&.
.SS "\fBMTSTATUS\fP fat32_delete_file (const char * path)"

.PP
This function deletes the file given to the function from the system\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Full path to delete file\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status code\&.
.RE
.PP

.PP
Definition at line \fB1794\fP of file \fBfat32\&.c\fP\&.
.SS "bool fat32_directory_is_empty (const char * path)"

.PP
This function returns if the directory given to the function is empty (e\&.g, has only '\&.' and '\&.\&.' entries) 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Full path to dir
.RE
.PP
\fBReturns\fP
.RS 4
True or false based if empty or not\&.
.RE
.PP

.PP
Definition at line \fB1499\fP of file \fBfat32\&.c\fP\&.
.SS "\fBMTSTATUS\fP fat32_init (int disk_index)"

.PP
Definition at line \fB531\fP of file \fBfat32\&.c\fP\&.
.SS "\fBMTSTATUS\fP fat32_list_directory (const char * path, char * listings, size_t max_len)"

.PP
Lists the directory given\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Path to directory, e\&.g "mydir/" 
.br
\fIlistings\fP [OUT] Pointer to directory listing\&. (each seperated with a newline character)
.br
\fImax_len\fP [IN] Max size of listings buffer\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status code\&.
.RE
.PP

.PP
Definition at line \fB1414\fP of file \fBfat32\&.c\fP\&.
.SS "void fat32_list_root (void )"

.PP
Definition at line \fB557\fP of file \fBfat32\&.c\fP\&.
.SS "\fBMTSTATUS\fP fat32_read_file (const char * filename, uint32_t * file_size_out, void ** buffer_out)"

.PP
A FAT32 Function that reads the file requested into a dynamically allocated buffer\&. 
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP The Filename to read, e\&.g "file\&.txt" or "tmp/folder/myfile\&.txt"
.br
\fIfile_size_out\fP A pointer to put the file size in bytes
.br
\fIbufferOut\fP A pointer to put the file buffer in (doesn't need to be dynamically allocated)
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status Code\&.
.RE
.PP

.PP
Definition at line \fB709\fP of file \fBfat32\&.c\fP\&.
.SS "\fBMTSTATUS\fP fat32_write_file (const char * path, const void * data, uint32_t size, uint32_t file_modification_mode)"

.PP
Creates a new file and writes data to it\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP The full path of the file to create
.br
\fIdata\fP A pointer to the data to write\&.
.br
\fIsize\fP The number of bytes to write
.br
\fIfile_modification_mode\fP Whether to APPEND or REPLACE the file\&. (in \fBFS_WRITE_MODES\fP enum)
.RE
.PP
\fBReturns\fP
.RS 4
\fBMTSTATUS\fP Status code\&.
.RE
.PP

.PP
Definition at line \fB1001\fP of file \fBfat32\&.c\fP\&.
.SH "Variable Documentation"
.PP 
.SS "\fBGOP_PARAMS\fP gop_local\fR [extern]\fP"

.PP
Definition at line \fB15\fP of file \fBkernel\&.c\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
